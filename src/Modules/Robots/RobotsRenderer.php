<?php
namespace ThemeSeoCore\Modules\Robots;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Builds the robots.txt contents from settings and filters.
 */
class RobotsRenderer {

	const OPTION = 'tsc_robots';

	/**
	 * Render final robots.txt string.
	 *
	 * @param string $base   The base robots generated by WP core/others.
	 * @param bool   $public Blog public flag (Settings > Reading).
	 * @return string
	 */
	public function render( string $base, bool $public ): string {
		$settings = $this->settings();

		$lines = array();

		// Respect "Discourage search engines" â€” WP core already adds a disallow-all.
		if ( ! $public ) {
			// Keep core's output, but append our Sitemap (if enabled).
			$lines = $this->maybe_sitemap_lines( array() );
			$merged = trim( $base ) . ( $lines ? "\n" . implode( "\n", $lines ) . "\n" : "\n" );
			return $this->normalize( $merged );
		}

		// Start with a default user-agent section.
		$lines[] = 'User-agent: *';

		// Disallow rules.
		foreach ( $this->lines_from_textarea( $settings['disallow'] ?? '' ) as $rule ) {
			$lines[] = 'Disallow: ' . $rule;
		}

		// Allow rules.
		foreach ( $this->lines_from_textarea( $settings['allow'] ?? '' ) as $rule ) {
			$lines[] = 'Allow: ' . $rule;
		}

		// Crawl-delay (optional; not supported by all bots).
		$delay = isset( $settings['crawl_delay'] ) ? (int) $settings['crawl_delay'] : 0;
		if ( $delay > 0 ) {
			$lines[] = 'Crawl-delay: ' . $delay;
		}

		// Extra raw lines (verifications, additional sections, etc).
		$extra = trim( (string) ( $settings['extra'] ?? '' ) );
		if ( $extra !== '' ) {
			$lines[] = '';
			foreach ( preg_split( '/\r\n|\r|\n/', $extra ) as $raw ) {
				$raw = trim( $raw );
				if ( $raw !== '' ) {
					$lines[] = $raw;
				}
			}
		}

		// Always include Sitemap unless disabled.
		$lines = $this->maybe_sitemap_lines( $lines, $settings );

		/**
		 * Final chance for other modules/integrations to add lines.
		 *
		 * @param array $lines
		 */
		$lines = (array) apply_filters( 'tsc/robots/lines', $lines );

		$out = implode( "\n", $lines ) . "\n";

		// If another plugin built something in $base, prepend it (rare).
		if ( trim( $base ) !== '' ) {
			$out = rtrim( $base ) . "\n\n" . $out;
		}

		return $this->normalize( $out );
	}

	/**
	 * Load saved settings.
	 *
	 * @return array<string,mixed>
	 */
	protected function settings(): array {
		$defaults = array(
			'disallow'     => '', // textarea, one path per line, e.g. /wp-admin/
			'allow'        => '', // textarea
			'crawl_delay'  => 0,
			'include_sitemap' => true,
			'extra'        => '',
		);
		$stored = get_option( self::OPTION, array() );
		return wp_parse_args( is_array( $stored ) ? $stored : array(), $defaults );
	}

	/**
	 * Add Sitemap lines if enabled.
	 *
	 * @param array<string> $lines
	 * @param array<string,mixed>|null $settings
	 * @return array<string>
	 */
	protected function maybe_sitemap_lines( array $lines, ?array $settings = null ): array {
		$settings = $settings ?? $this->settings();
		if ( empty( $settings['include_sitemap'] ) ) {
			return $lines;
		}

		// Our sitemaps module exposes /sitemap.xml; otherwise leave it (harmless if 404s).
		$index = home_url( '/sitemap.xml' );
		$lines[] = 'Sitemap: ' . esc_url_raw( $index );

		return $lines;
	}

	/**
	 * Normalize whitespace and strip illegal lines.
	 */
	protected function normalize( string $txt ): string {
		$txt = preg_replace( '/[ \t]+/', ' ', $txt );
		$txt = preg_replace( "/\n{3,}/", "\n\n", $txt );
		return trim( $txt ) . "\n";
	}

	/**
	 * Convert textarea input to cleaned rule lines (strip comments/spaces).
	 *
	 * @param string $text
	 * @return array<int,string>
	 */
	protected function lines_from_textarea( string $text ): array {
		$out = array();
		foreach ( preg_split( '/\r\n|\r|\n/', $text ) as $line ) {
			$line = trim( preg_replace( '/#.*/', '', $line ) ); // strip inline comments
			if ( $line === '' ) {
				continue;
			}
			// Ensure path starts with "/" unless it's "*".
			if ( $line !== '*' && strpos( $line, '/' ) !== 0 ) {
				$line = '/' . $line;
			}
			$out[] = $line;
		}
		return $out;
	}
}

